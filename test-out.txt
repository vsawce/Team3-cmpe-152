Tokens:
[@0,0:6='PROGRAM',<38>,1:0]
[@1,8:17='HelloWorld',<57>,1:8]
[@2,18:18=';',<74>,1:18]
[@3,20:24='BEGIN',<5>,2:0]
[@4,30:30='i',<57>,3:4]
[@5,32:33=':=',<62>,3:6]
[@6,35:35='0',<55>,3:9]
[@7,36:36=';',<74>,3:10]
[@8,42:42='j',<57>,4:4]
[@9,44:45=':=',<62>,4:6]
[@10,47:47='0',<55>,4:9]
[@11,48:48=';',<74>,4:10]
[@12,55:56='IF',<22>,6:4]
[@13,58:58='i',<57>,6:7]
[@14,60:60='=',<63>,6:9]
[@15,62:62='j',<57>,6:11]
[@16,64:67='THEN',<44>,6:13]
[@17,71:71='x',<57>,7:1]
[@18,73:74=':=',<62>,7:3]
[@19,76:79='3.14',<56>,7:6]
[@20,85:88='ELSE',<15>,8:4]
[@21,92:92='x',<57>,9:1]
[@22,94:95=':=',<62>,9:3]
[@23,97:98='-5',<55>,9:6]
[@24,99:99=';',<74>,9:8]
[@25,106:110='while',<52>,11:4]
[@26,112:112='j',<57>,11:10]
[@27,114:114='<',<67>,11:12]
[@28,116:116='5',<55>,11:14]
[@29,118:119='do',<13>,11:16]
[@30,125:129='BEGIN',<5>,12:4]
[@31,132:132='j',<57>,13:1]
[@32,133:134=':=',<62>,13:2]
[@33,135:135='j',<57>,13:4]
[@34,137:137='+',<58>,13:6]
[@35,139:139='1',<55>,13:8]
[@36,140:140=';',<74>,13:9]
[@37,146:148='END',<16>,14:4]
[@38,149:149=';',<74>,14:7]
[@39,156:158='FOR',<19>,16:4]
[@40,160:160='i',<57>,16:8]
[@41,162:163=':=',<62>,16:10]
[@42,165:165='1',<55>,16:13]
[@43,167:168='to',<45>,16:15]
[@44,170:170='5',<55>,16:18]
[@45,172:173='do',<13>,16:20]
[@46,175:179='begin',<5>,16:23]
[@47,182:182='j',<57>,17:1]
[@48,184:185=':=',<62>,17:3]
[@49,187:187='j',<57>,17:6]
[@50,189:189='+',<58>,17:8]
[@51,191:191='1',<55>,17:10]
[@52,192:192=';',<74>,17:11]
[@53,198:200='end',<16>,18:4]
[@54,201:201=';',<74>,18:7]
[@55,203:205='END',<16>,19:0]
[@56,206:206='.',<84>,19:3]
[@57,207:206='<EOF>',<-1>,19:4]

Parse tree (Lisp format):
(program (programHeader PROGRAM (identifier HelloWorld) ;) (compStatement BEGIN (statements (statement (assignStatement (identifier i) := (expr 0))) ; (statement (assignStatement (identifier j) := (expr 0))) ; (statement (ifStatement IF (expr (identifier i) (relationalOperator =) (expr (identifier j))) THEN (statement (assignStatement (identifier x) := (expr 3.14))) ELSE (statement (assignStatement (identifier x) := (expr -5))))) ; (statement (whileStatement while (expr (identifier j) (relationalOperator <) (expr 5)) do (statement (compStatement BEGIN (statements (statement (assignStatement (identifier j) := (expr (expr (identifier j)) + (expr 1)))) ;) END)))) ; (statement (forStatement FOR (identifier i) := (startValue (expr 1)) to (endValue (expr 5)) do (statement (compStatement begin (statements (statement (assignStatement (identifier j) := (expr (expr (identifier j)) + (expr 1)))) ;) end)))) ;) END) . <EOF>)
