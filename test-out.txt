Tokens:
[@0,0:6='PROGRAM',<41>,1:0]
[@1,8:17='HelloWorld',<60>,1:8]
[@2,18:18=';',<77>,1:18]
[@3,21:23='VAR',<54>,3:0]
[@4,29:29='i',<60>,4:4]
[@5,31:31=':',<78>,4:6]
[@6,33:39='integer',<60>,4:8]
[@7,40:40=';',<77>,4:15]
[@8,46:46='j',<60>,5:4]
[@9,48:48=':',<78>,5:6]
[@10,50:56='integer',<60>,5:8]
[@11,57:57=';',<77>,5:15]
[@12,60:64='CONST',<9>,7:0]
[@13,70:74='euler',<60>,8:4]
[@14,76:76='=',<66>,8:10]
[@15,78:84='2.71828',<59>,8:12]
[@16,85:85=';',<77>,8:19]
[@17,91:94='zero',<60>,9:4]
[@18,96:96='=',<66>,9:9]
[@19,98:98='0',<58>,9:11]
[@20,99:99=';',<77>,9:12]
[@21,102:105='TYPE',<50>,11:0]
[@22,111:113='int',<60>,12:4]
[@23,115:115='=',<66>,12:8]
[@24,117:123='integer',<60>,12:10]
[@25,124:124=';',<77>,12:17]
[@26,130:132='day',<60>,13:4]
[@27,134:134='=',<66>,13:8]
[@28,136:141='string',<46>,13:10]
[@29,142:142=';',<77>,13:16]
[@30,145:149='BEGIN',<5>,15:0]
[@31,155:155='i',<60>,16:4]
[@32,157:158=':=',<65>,16:6]
[@33,160:160='0',<58>,16:9]
[@34,161:161=';',<77>,16:10]
[@35,167:167='j',<60>,17:4]
[@36,169:170=':=',<65>,17:6]
[@37,172:172='0',<58>,17:9]
[@38,173:173=';',<77>,17:10]
[@39,180:181='IF',<25>,19:4]
[@40,183:183='i',<60>,19:7]
[@41,185:185='=',<66>,19:9]
[@42,187:187='j',<60>,19:11]
[@43,189:192='THEN',<47>,19:13]
[@44,196:196='x',<60>,20:1]
[@45,198:199=':=',<65>,20:3]
[@46,201:204='3.14',<59>,20:6]
[@47,210:213='ELSE',<18>,21:4]
[@48,217:217='x',<60>,22:1]
[@49,219:220=':=',<65>,22:3]
[@50,222:223='-5',<58>,22:6]
[@51,224:224=';',<77>,22:8]
[@52,231:235='while',<55>,24:4]
[@53,237:237='j',<60>,24:10]
[@54,239:239='<',<70>,24:12]
[@55,241:241='5',<58>,24:14]
[@56,243:244='do',<16>,24:16]
[@57,250:254='BEGIN',<5>,25:4]
[@58,257:257='j',<60>,26:1]
[@59,258:259=':=',<65>,26:2]
[@60,260:260='j',<60>,26:4]
[@61,262:262='+',<61>,26:6]
[@62,264:264='1',<58>,26:8]
[@63,265:265=';',<77>,26:9]
[@64,271:273='END',<19>,27:4]
[@65,274:274=';',<77>,27:7]
[@66,281:283='FOR',<22>,29:4]
[@67,285:285='i',<60>,29:8]
[@68,287:288=':=',<65>,29:10]
[@69,290:290='1',<58>,29:13]
[@70,292:293='to',<48>,29:15]
[@71,295:295='5',<58>,29:18]
[@72,297:298='do',<16>,29:20]
[@73,300:304='begin',<5>,29:23]
[@74,307:307='j',<60>,30:1]
[@75,309:310=':=',<65>,30:3]
[@76,312:312='j',<60>,30:6]
[@77,314:314='+',<61>,30:8]
[@78,316:316='1',<58>,30:10]
[@79,317:317=';',<77>,30:11]
[@80,323:325='end',<19>,31:4]
[@81,326:326=';',<77>,31:7]
[@82,328:330='END',<19>,32:0]
[@83,331:331='.',<91>,32:3]
[@84,332:331='<EOF>',<-1>,32:4]

Parse tree (Lisp format):
(program (programHeader PROGRAM (identifier HelloWorld) ;) (variableDeclarationHeader VAR (variableDeclaration (identifierList (identifier i)) : (type (simpleType (typeIdentifier (identifier integer))))) ; (variableDeclaration (identifierList (identifier j)) : (type (simpleType (typeIdentifier (identifier integer))))) ;) (constantDeclarationHeader CONST (constantDeclaration (identifier euler) = (constant (unsignedNumber 2.71828))) ; (constantDeclaration (identifier zero) = (constant (unsignedNumber 0))) ;) (typeDeclarationHeader TYPE (typeDeclaration (identifier int) = (type (simpleType (typeIdentifier (identifier integer))))) ; (typeDeclaration (identifier day) = (type (simpleType (typeIdentifier string)))) ;) (compStatement BEGIN (statements (statement (assignStatement (identifier i) := (expr 0))) ; (statement (assignStatement (identifier j) := (expr 0))) ; (statement (ifStatement IF (expr (identifier i) (relationalOperator =) (expr (identifier j))) THEN (statement (assignStatement (identifier x) := (expr 3.14))) ELSE (statement (assignStatement (identifier x) := (expr -5))))) ; (statement (whileStatement while (expr (identifier j) (relationalOperator <) (expr 5)) do (statement (compStatement BEGIN (statements (statement (assignStatement (identifier j) := (expr (expr (identifier j)) + (expr 1)))) ;) END)))) ; (statement (forStatement FOR (identifier i) := (startValue (expr 1)) to (endValue (expr 5)) do (statement (compStatement begin (statements (statement (assignStatement (identifier j) := (expr (expr (identifier j)) + (expr 1)))) ;) end)))) ;) END) . <EOF>)
